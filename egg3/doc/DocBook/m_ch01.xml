<chapter>
  <title>Egg是什么 </title>
  
  <literallayout>    在目前的信息化系统中，信息可以划分为两大类。一类信息能够用数据或统一的结构加以表示，我们称之为结构化数据，如数字、符号。这类数据通常可以用二维表结构的形式，存放在关系型数据库中。而另一类信息无法用数字或统一的结构表示，如文本、图像、声音、网页等，我们称之为非结构化数据，这类数据无法使用传统的关系型数据库来进行管理。
    
    随着信息化建设的不断推进，使得目前的企业中，非结构化信息所占的比重也越来越大。但是，绝大多数企业虽然拥有对结构化信息的处理经验，但对于非结构化信息，还是缺乏足够的理解与经验，使得这些信息虽然丰富，但无法提供更多的价值。整个市场都迫切地需要一种非结构化信息的解决方案。Egg就是整个解决方案中最核心的产品。Egg是一个能够同够同时处理结构化与非结构化信息的信息处理平台，不但能够识别与处理更多格式与标准的信息，同时也能兼容传统的关系型数据库。
  </literallayout>
  
     <sect1><title>面向非结构化数据的管理方式 </title>
	  
	  <literallayout>
	    Egg所管理的非结构化数据是指那些没有数据模型描述、或者无法方便的由计算机程序处理的数据。这个定义用以区别那些可以用关系模型（Relation Model）中的准则：Relation（在关系型数据库的实现中称为Table），Tuple（在关系型数据库的实现中称为  Record），Attribute（在关系型数据库的实现中称为Field）来描述的数据。常见的非结构化数据有两大类，一类是数据的结构没有被定义过，但仍然可以通过一些方式来发现其结构；第二类是数据结构虽然被明确定义，但该定义并没有对计算机程序处理有任何帮助。第一类的例子有，能够由程序挖掘出结构的、自然语言文本（邮件、办公文档、网页内容、书籍等）、声音、视频等数据。描述这些数据所需要的结构需要通过特定的分析算法，如对于自然语言文本来说，可以通过词法、语法、或其它各类模式识别方法，提取其中的结构化成分。第二类的，指那些包含于已结构化数据中的非结构化内容。最典型的例子有 HTML，HTML的标签已经将HTML文本进行了结构化描述，但这个描述仅仅是供浏览器显示时使用，而没有对包含的内容做任何描述。通常来说，第二类数据都能被转化成第一类数据，用统一的方法进行处理。

	    Egg为了实现非结构化数据的存贮，没有使用关系型数据库模型（RDBM）；与关系型数据模型的区别在于，没有了关系（Relation），取而代之的是集合（Collection）；没有了（Tuple），取而代之的是实体（Entity）；没有了属性（Attribute），取而代之的是（Field）。与以往的某些文档数据库（Document-oriented database）不同的是，Egg并不是架设在关系型数据库之上的表现形式的转换层，Egg自身实现了针对非结构化数据特点的存贮结构。

	    特征分析、数据挖掘等技术被Egg用来分析与提取所存贮的非结构数据中的特征。由于非结构化数据是一个非常广泛的定义，Egg并没有对它所存贮的非结构化数据做任何限定，也就是说，Egg可以保存任何种类的非结构化数据。但是对非结构化数据进行预先分类，然后对不同类型的数据运用不同的预处理及分析技术，将得到更准确的检索效果。Egg目前提供了针对文本、音频在内的多种预处理器与分析器，并公开分析器接口，支持对末公开格式分析器的二次开发，以识别更多类型的数据。

	    对于文字来说，自然语言处理技术（NLP），是目前研究与运用的热点，也是Egg中运用最广泛的技术。文本分析器可以分析汉语、英语的网页、办公文档、纯文本（plain text）等文本。分析的方式包括，特征词，词性，语法树，句子依存关系等。
          　　     
      </literallayout></sect1>

	  <sect1><title>动态域支持</title>
	    <literallayout>
          Egg非结构化数据库的一大特点，就是动态域查询。动态域查询缘于非结构化数据库，不同于关系型数据库，不具备一个明确的方案（Schema）。非关系型数据，根据文档的内容，可以产生不同的域（Field）。使用者可以使用任何条件（Criteria）获得需要的数据。</literallayout></sect1>

	  <sect1><title>内容检索支持</title>
	  <literallayout>
    通常比较厚的书籍后面常常附关键词索引表（比如：北京：12, 34页， 上海：3,77页……），它能够帮助读者比较快地找到相关内容的页码。而数据库索引能够大大提高查询的速度原理也是一样，想像一下通过书后面的索引查找的 速度要比一页一页地翻内容高多少倍……而索引之所以效率高，另外一个原因是它是排好序的。对于检索系统来说核心是一个排序问题。

　　由于数据库索引不是为全文索引设计的，因此，使用like "%keyword%"时，数据库索引是不起作用的， 在使用like查询时，搜索过程又变成类似于一页页翻书的遍历过程了，所以对于含有模糊查询的数据库服务来说，LIKE对性能的危害是极大的。如果是需要 对多个关键词进行模糊匹配：like"%keyword1%" and like "%keyword2%" ...其效率也就可想而知了。

　　Egg建立一个高效检索系统的关键是建立一个类似于科技索引一样的反向索引机制，将数据源（比如多篇文章）排序顺序存储的同时，有另外一个排好序的关键词列表，用于存储关键词==>文章映射关系，利用这样的映射关系索引：[关键词==>出现关键词的文章编号，出现次数（甚至包括位置：起始偏移量，结束偏移量），出现频率]，检索过程就是把模糊查询变成多个可以利用索引的精确查询的逻辑组合的过程。从而大大提高了多关键词查询的效率，所以，全文检索问题归结到最后是一个排序问题。 

      </literallayout></sect1>



	  <sect1><title>结构化查询支持</title>
	  <literallayout>
　　Egg支持多种查询对象，查询可以用条件（Criteria）对象表达，也可以使用类SQL语法的表达式（Expression）表达。

　　Egg的查询条件，包含了对指定域中的特征进行与、或、非的操作。特征根据数据类型的不同，而使用不同的分析器，会有不同形态体现出来。最常见的文本特征为，关键词，语法，词性等。

　　Egg支持对查询的结果集进行限定。这些限定包括：

　　　结果集中包含的域（Field）的限定；
　　　结果集条数的限定；
　　　结果集范围的限定；
　　　结果集排序方式的限定；

      </literallayout></sect1>


	  <sect1><title>数据完整性支持</title>
	  <literallayout>
    Egg是一个面向互联网级别的非关系型数据库，因此在灾难情况发生后，如何保证数据恢复以及数据的完整性，是Egg面临的一个重要的问题。Egg在存贮数据的同时，同商用关系型数据库一样，引了了Redo日志机制，保证了当灾难情况发生后，同样可以保证数据是可以恢复的。 

      </literallayout></sect1>


	  <sect1><title>远程访问支持</title>
	  <literallayout>
    eggSocket server是egg基础存储层之上的一层C/S结构，使得egg能被远程所访问，
     </literallayout></sect1>
	  


	  <sect1><title>多机集群支持</title>
	  <literallayout>
    Egg的eggClusters模块，可以实现存贮空间的横向扩展。当spider采集的网页数量随着时间的增长不断增多，egg可以像web server和app server那样通过简单的添加更多的硬件和服务节点来扩展性能和负载能力。 

     </literallayout></sect1>



	  <sect1><title>读写分离支持</title>
	  <literallayout>
    Egg的RWS(Read/Write Splitting)模块，将多台机器进行主从划分，先对“主”机器组进行数据写入，再将数据同步到“从”机器组，使得两组机器写入操作交替进行，在一方机器写入时另外一方负责处理读申请，从而将读写压力分离开来。 

     </literallayout></sect1>



</chapter>

